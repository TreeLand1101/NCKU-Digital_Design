// 
// Designer: P76124265
//

module CIPU(
input       clk, 
input       rst,
input       [7:0]people_thing_in,
input       ready_fifo,
input       ready_lifo,
input       [7:0]thing_in,
input       [3:0]thing_num,
output reg valid_fifo,
output      valid_lifo,
output      valid_fifo2,
output reg [7:0]people_thing_out,
output      [7:0]thing_out,
output      done_thing,
output reg done_fifo,
output      done_lifo,
output      done_fifo2);

// FIFO
reg valid_fifo;
reg done_fifo;
reg [7:0] people_thing_out;
reg [1:0] FIFO_CurrentState, FIFO_Nextstate;
parameter [1:0] FIFO_Start = 2'b00, FIFO_Read = 2'b01, FIFO_Valid = 2'b10;
reg [4:0] FIFO_Array[15:0];
reg [3:0] Array_Size;
reg [3:0] i;

// FIFOLIFO
reg [1:0] FIFOLIFO_CurrentState, FIFOLIFO_Nextstate;
reg [2:0] FIFOLIFO_output;
parameter [1:0] FIFOLIFO_Start = 2'b00, FIFOLIFO_Read = 2'b01, FIFOLIFO_Valid = 2'b10, FIFOLIFO_Valid2 = 2'b11;
reg [3:0] LIFO_Stack[15:0];
reg [3:0] Stack_Top; 
reg [3:0] FIFO2_Array[15:0];
reg [3:0] j;


// FIFO State register
always @(posedge clk or posedge rst) 
begin
    if (rst) begin
        FIFO_CurrentState <= FIFO_Start;
        Array_Size <= 0;
        i <= 0;
        valid_fifo <= 0;
        done_fifo <= 0;
    end
    else
        FIFO_CurrentState <= FIFO_Nextstate;
end

// FIFO next state
always @(FIFO_CurrentState) 
begin
    case (FIFO_CurrentState)
        FIFO_Start: begin
            done_fifo <= 0;
            if (ready_fifo == 0) 
                FIFO_Nextstate <= FIFO_Start;
            else 
                FIFO_Nextstate <= FIFO_Read;
        end

        FIFO_Read: begin
            if (people_thing_in != 8'h24) begin // 8'h24 represents the ASCII code for '$'
                FIFO_Nextstate <= FIFO_Read;
                Array_Size <= Array_Size + 1;
                FIFO_Array[Array_Size] <= people_thing_in;
            end
            else begin
                FIFO_Nextstate <= FIFO_Valid;
                valid_fifo <= 1;
            end

        end
     
        FIFO_Valid: begin
            if (i < Array_Size) begin
                FIFO_Nextstate <= FIFO_Valid;
                i <= i + 1;
            end
            else begin
                FIFO_Nextstate <= FIFO_Start;
                valid_fifo <= 0;
                done_fifo <= 1;
            end 
        end

    endcase
end

// FIFO output logic
always @(FIFO_CurrentState)
begin
    case (FIFO_CurrentState)
        FIFO_Start: people_thing_out <= 0; 
        FIFO_Read: people_thing_out <= 0;
        FIFO_Valid: people_thing_out <= FIFO_Array[i];
    endcase
end 




// // FIFOLIFO  State register
// begin
//     if (rst) begin
//         FIFOLIFO_CurrentState <= FIFOLIFO_Start;
//         Stack_Top <= 0;
//         j <= 0;
//     end
//     else begin
//         FIFOLIFO_CurrentState <= FIFOLIFO_Nextstate;        
//     end    
// end



// // FIFOLIFO next state
// always @(FIFOLIFO_CurrentState) 
// begin

// end

// // FIFOLIFO output logic
// always @(FIFOLIFO_CurrentState)
// begin
//     case (FIFOLIFO_CurrentState)
//         FIFOLIFO_Start: thing_out <= 0; 
//         FIFOLIFO_Read: thing_out <= 0;
//         FIFOLIFO_Valid: thing_out <= LIFO_Stack[top];
//         FIFOLIFO_Valid2: thing_out <= FIFO2_Array[j];
//     endcase
// end 

endmodule